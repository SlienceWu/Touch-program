{"version":3,"sources":["../../../../../src/services/utils/3D/projector.js"],"names":["THREE","require","RenderableObject","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","Vector3","vertexNormalsModel","vertexNormalsLength","color","Color","material","uvs","Vector2","position","positionWorld","positionScreen","Vector4","visible","prototype","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","Matrix3","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","RenderList","normals","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","b","getNextLineInPool","pushTriangle","c","side","DoubleSide","getNextFaceInPool","fromArray","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectScene","scene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","addObject","getNextObjectInPool","setFromMatrixPosition","applyProjection","traverseVisible","Light","Mesh","Line","frustumCulled","intersectsObject","Sprite","intersectsSprite","sort","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","undefined","positions","array","l","index","indices","group","start","count","Geometry","vertices","faces","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","v","vl","morphTargets","morphInfluences","morphTargetInfluences","t","tl","influence","target","targetVertex","f","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","n","nl","Math","min","vertexUvs","u","step","LineSegments","clipLine","multiplyScalar","max","VertexColors","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","module","exports"],"mappings":"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","file":"projector.js","sourcesContent":["var THREE = require('three');\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author julianwa / https://github.com/julianwa\r\n * @author avgp / https://github.com/avgp\r\n */\r\n\r\nvar RenderableObject = function () {\r\n\r\n    this.id = 0;\r\n\r\n    this.object = null;\r\n    this.z = 0;\r\n    this.renderOrder = 0;\r\n\r\n};\r\n\r\n//\r\n\r\nvar RenderableFace = function () {\r\n\r\n    this.id = 0;\r\n\r\n    this.v1 = new RenderableVertex();\r\n    this.v2 = new RenderableVertex();\r\n    this.v3 = new RenderableVertex();\r\n\r\n    this.normalModel = new THREE.Vector3();\r\n\r\n    this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n    this.vertexNormalsLength = 0;\r\n\r\n    this.color = new THREE.Color();\r\n    this.material = null;\r\n    this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\r\n\r\n    this.z = 0;\r\n    this.renderOrder = 0;\r\n\r\n};\r\n\r\n//\r\n\r\nvar RenderableVertex = function () {\r\n\r\n    this.position = new THREE.Vector3();\r\n    this.positionWorld = new THREE.Vector3();\r\n    this.positionScreen = new THREE.Vector4();\r\n\r\n    this.visible = true;\r\n\r\n};\r\n\r\nRenderableVertex.prototype.copy = function ( vertex ) {\r\n\r\n    this.positionWorld.copy( vertex.positionWorld );\r\n    this.positionScreen.copy( vertex.positionScreen );\r\n\r\n};\r\n\r\n//\r\n\r\nvar RenderableLine = function () {\r\n\r\n    this.id = 0;\r\n\r\n    this.v1 = new RenderableVertex();\r\n    this.v2 = new RenderableVertex();\r\n\r\n    this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\r\n    this.material = null;\r\n\r\n    this.z = 0;\r\n    this.renderOrder = 0;\r\n\r\n};\r\n\r\n//\r\n\r\nvar RenderableSprite = function () {\r\n\r\n    this.id = 0;\r\n\r\n    this.object = null;\r\n\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.z = 0;\r\n\r\n    this.rotation = 0;\r\n    this.scale = new THREE.Vector2();\r\n\r\n    this.material = null;\r\n    this.renderOrder = 0;\r\n\r\n};\r\n\r\n\r\nvar Projector = function () {\r\n\r\n    var _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\r\n        _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\r\n        _face, _faceCount, _facePool = [], _facePoolLength = 0,\r\n        _line, _lineCount, _linePool = [], _linePoolLength = 0,\r\n        _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\r\n\r\n        _renderData = { objects: [], lights: [], elements: [] },\r\n\r\n        _vector3 = new THREE.Vector3(),\r\n        _vector4 = new THREE.Vector4(),\r\n\r\n        _clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\r\n        _boundingBox = new THREE.Box3(),\r\n        _points3 = new Array( 3 ),\r\n        _points4 = new Array( 4 ),\r\n\r\n        _viewMatrix = new THREE.Matrix4(),\r\n        _viewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n        _modelMatrix,\r\n        _modelViewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n        _normalMatrix = new THREE.Matrix3(),\r\n\r\n        _frustum = new THREE.Frustum(),\r\n\r\n        _clippedVertex1PositionScreen = new THREE.Vector4(),\r\n        _clippedVertex2PositionScreen = new THREE.Vector4();\r\n\r\n    //\r\n\r\n    this.projectVector = function ( vector, camera ) {\r\n\r\n        console.warn( 'Projector: .projectVector() is now vector.project().' );\r\n        vector.project( camera );\r\n\r\n    };\r\n\r\n    this.unprojectVector = function ( vector, camera ) {\r\n\r\n        console.warn( 'Projector: .unprojectVector() is now vector.unproject().' );\r\n        vector.unproject( camera );\r\n\r\n    };\r\n\r\n    this.pickingRay = function ( vector, camera ) {\r\n\r\n        console.error( 'Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\r\n    };\r\n\r\n    //\r\n\r\n    var RenderList = function () {\r\n\r\n        var normals = [];\r\n        var uvs = [];\r\n\r\n        var object = null;\r\n        var material = null;\r\n\r\n        var normalMatrix = new THREE.Matrix3();\r\n\r\n        function setObject( value ) {\r\n\r\n            object = value;\r\n            material = object.material;\r\n\r\n            normalMatrix.getNormalMatrix( object.matrixWorld );\r\n\r\n            normals.length = 0;\r\n            uvs.length = 0;\r\n\r\n        }\r\n\r\n        function projectVertex( vertex ) {\r\n\r\n            var position = vertex.position;\r\n            var positionWorld = vertex.positionWorld;\r\n            var positionScreen = vertex.positionScreen;\r\n\r\n            positionWorld.copy( position ).applyMatrix4( _modelMatrix );\r\n            positionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\r\n\r\n            var invW = 1 / positionScreen.w;\r\n\r\n            positionScreen.x *= invW;\r\n            positionScreen.y *= invW;\r\n            positionScreen.z *= invW;\r\n\r\n            vertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\r\n                positionScreen.y >= - 1 && positionScreen.y <= 1 &&\r\n                positionScreen.z >= - 1 && positionScreen.z <= 1;\r\n\r\n        }\r\n\r\n        function pushVertex( x, y, z ) {\r\n\r\n            _vertex = getNextVertexInPool();\r\n            _vertex.position.set( x, y, z );\r\n\r\n            projectVertex( _vertex );\r\n\r\n        }\r\n\r\n        function pushNormal( x, y, z ) {\r\n\r\n            normals.push( x, y, z );\r\n\r\n        }\r\n\r\n        function pushUv( x, y ) {\r\n\r\n            uvs.push( x, y );\r\n\r\n        }\r\n\r\n        function checkTriangleVisibility( v1, v2, v3 ) {\r\n\r\n            if ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\r\n\r\n            _points3[ 0 ] = v1.positionScreen;\r\n            _points3[ 1 ] = v2.positionScreen;\r\n            _points3[ 2 ] = v3.positionScreen;\r\n\r\n            return _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\r\n\r\n        }\r\n\r\n        function checkBackfaceCulling( v1, v2, v3 ) {\r\n\r\n            return ( ( v3.positionScreen.x - v1.positionScreen.x ) *\r\n                ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n                ( v3.positionScreen.y - v1.positionScreen.y ) *\r\n                ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\r\n\r\n        }\r\n\r\n        function pushLine( a, b ) {\r\n\r\n            var v1 = _vertexPool[ a ];\r\n            var v2 = _vertexPool[ b ];\r\n\r\n            _line = getNextLineInPool();\r\n\r\n            _line.id = object.id;\r\n            _line.v1.copy( v1 );\r\n            _line.v2.copy( v2 );\r\n            _line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\r\n            _line.renderOrder = object.renderOrder;\r\n\r\n            _line.material = object.material;\r\n\r\n            _renderData.elements.push( _line );\r\n\r\n        }\r\n\r\n        function pushTriangle( a, b, c ) {\r\n\r\n            var v1 = _vertexPool[ a ];\r\n            var v2 = _vertexPool[ b ];\r\n            var v3 = _vertexPool[ c ];\r\n\r\n            if ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\r\n\r\n            if ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\r\n\r\n                _face = getNextFaceInPool();\r\n\r\n                _face.id = object.id;\r\n                _face.v1.copy( v1 );\r\n                _face.v2.copy( v2 );\r\n                _face.v3.copy( v3 );\r\n                _face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\r\n                _face.renderOrder = object.renderOrder;\r\n\r\n                // use first vertex normal as face normal\r\n\r\n                _face.normalModel.fromArray( normals, a * 3 );\r\n                _face.normalModel.applyMatrix3( normalMatrix ).normalize();\r\n\r\n                for ( var i = 0; i < 3; i ++ ) {\r\n\r\n                    var normal = _face.vertexNormalsModel[ i ];\r\n                    normal.fromArray( normals, arguments[ i ] * 3 );\r\n                    normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n                    var uv = _face.uvs[ i ];\r\n                    uv.fromArray( uvs, arguments[ i ] * 2 );\r\n\r\n                }\r\n\r\n                _face.vertexNormalsLength = 3;\r\n\r\n                _face.material = object.material;\r\n\r\n                _renderData.elements.push( _face );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return {\r\n            setObject: setObject,\r\n            projectVertex: projectVertex,\r\n            checkTriangleVisibility: checkTriangleVisibility,\r\n            checkBackfaceCulling: checkBackfaceCulling,\r\n            pushVertex: pushVertex,\r\n            pushNormal: pushNormal,\r\n            pushUv: pushUv,\r\n            pushLine: pushLine,\r\n            pushTriangle: pushTriangle\r\n        }\r\n\r\n    };\r\n\r\n    var renderList = new RenderList();\r\n\r\n    this.projectScene = function ( scene, camera, sortObjects, sortElements ) {\r\n\r\n        _faceCount = 0;\r\n        _lineCount = 0;\r\n        _spriteCount = 0;\r\n\r\n        _renderData.elements.length = 0;\r\n\r\n        if ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n        if ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n        _viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\r\n        _viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\r\n\r\n        _frustum.setFromMatrix( _viewProjectionMatrix );\r\n\r\n        //\r\n\r\n        _objectCount = 0;\r\n\r\n        _renderData.objects.length = 0;\r\n        _renderData.lights.length = 0;\r\n\r\n        function addObject( object ) {\r\n\r\n            _object = getNextObjectInPool();\r\n            _object.id = object.id;\r\n            _object.object = object;\r\n\r\n            _vector3.setFromMatrixPosition( object.matrixWorld );\r\n            _vector3.applyProjection( _viewProjectionMatrix );\r\n            _object.z = _vector3.z;\r\n            _object.renderOrder = object.renderOrder;\r\n\r\n            _renderData.objects.push( _object );\r\n\r\n        }\r\n\r\n        scene.traverseVisible( function ( object ) {\r\n\r\n            if ( object instanceof THREE.Light ) {\r\n\r\n                _renderData.lights.push( object );\r\n\r\n            } else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\r\n\r\n                if ( object.material.visible === false ) return;\r\n                if ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\r\n\r\n                addObject( object );\r\n\r\n            } else if ( object instanceof THREE.Sprite ) {\r\n\r\n                if ( object.material.visible === false ) return;\r\n                if ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\r\n\r\n                addObject( object );\r\n\r\n            }\r\n\r\n        } );\r\n\r\n        if ( sortObjects === true ) {\r\n\r\n            _renderData.objects.sort( painterSort );\r\n\r\n        }\r\n\r\n        //\r\n\r\n        for ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\r\n\r\n            var object = _renderData.objects[ o ].object;\r\n            var geometry = object.geometry;\r\n\r\n            renderList.setObject( object );\r\n\r\n            _modelMatrix = object.matrixWorld;\r\n\r\n            _vertexCount = 0;\r\n\r\n            if ( object instanceof THREE.Mesh ) {\r\n\r\n                if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n                    var attributes = geometry.attributes;\r\n                    var groups = geometry.groups;\r\n\r\n                    if ( attributes.position === undefined ) continue;\r\n\r\n                    var positions = attributes.position.array;\r\n\r\n                    for ( var i = 0, l = positions.length; i < l; i += 3 ) {\r\n\r\n                        renderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\r\n\r\n                    }\r\n\r\n                    if ( attributes.normal !== undefined ) {\r\n\r\n                        var normals = attributes.normal.array;\r\n\r\n                        for ( var i = 0, l = normals.length; i < l; i += 3 ) {\r\n\r\n                            renderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    if ( attributes.uv !== undefined ) {\r\n\r\n                        var uvs = attributes.uv.array;\r\n\r\n                        for ( var i = 0, l = uvs.length; i < l; i += 2 ) {\r\n\r\n                            renderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    if ( geometry.index !== null ) {\r\n\r\n                        var indices = geometry.index.array;\r\n\r\n                        if ( groups.length > 0 ) {\r\n\r\n                            for ( var o = 0; o < groups.length; o ++ ) {\r\n\r\n                                var group = groups[ o ];\r\n\r\n                                for ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\r\n\r\n                                    renderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            for ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\r\n                                renderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        for ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\r\n\r\n                            renderList.pushTriangle( i, i + 1, i + 2 );\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n                    var vertices = geometry.vertices;\r\n                    var faces = geometry.faces;\r\n                    var faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\r\n                    _normalMatrix.getNormalMatrix( _modelMatrix );\r\n\r\n                    var material = object.material;\r\n\r\n                    var isFaceMaterial = material instanceof THREE.MultiMaterial;\r\n                    var objectMaterials = isFaceMaterial === true ? object.material : null;\r\n\r\n                    for ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n                        var vertex = vertices[ v ];\r\n\r\n                        _vector3.copy( vertex );\r\n\r\n                        if ( material.morphTargets === true ) {\r\n\r\n                            var morphTargets = geometry.morphTargets;\r\n                            var morphInfluences = object.morphTargetInfluences;\r\n\r\n                            for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\r\n                                var influence = morphInfluences[ t ];\r\n\r\n                                if ( influence === 0 ) continue;\r\n\r\n                                var target = morphTargets[ t ];\r\n                                var targetVertex = target.vertices[ v ];\r\n\r\n                                _vector3.x += ( targetVertex.x - vertex.x ) * influence;\r\n                                _vector3.y += ( targetVertex.y - vertex.y ) * influence;\r\n                                _vector3.z += ( targetVertex.z - vertex.z ) * influence;\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        renderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\r\n\r\n                    }\r\n\r\n                    for ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n                        var face = faces[ f ];\r\n\r\n                        material = isFaceMaterial === true\r\n                            ? objectMaterials.materials[ face.materialIndex ]\r\n                            : object.material;\r\n\r\n                        if ( material === undefined ) continue;\r\n\r\n                        var side = material.side;\r\n\r\n                        var v1 = _vertexPool[ face.a ];\r\n                        var v2 = _vertexPool[ face.b ];\r\n                        var v3 = _vertexPool[ face.c ];\r\n\r\n                        if ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\r\n\r\n                        var visible = renderList.checkBackfaceCulling( v1, v2, v3 );\r\n\r\n                        if ( side !== THREE.DoubleSide ) {\r\n\r\n                            if ( side === THREE.FrontSide && visible === false ) continue;\r\n                            if ( side === THREE.BackSide && visible === true ) continue;\r\n\r\n                        }\r\n\r\n                        _face = getNextFaceInPool();\r\n\r\n                        _face.id = object.id;\r\n                        _face.v1.copy( v1 );\r\n                        _face.v2.copy( v2 );\r\n                        _face.v3.copy( v3 );\r\n\r\n                        _face.normalModel.copy( face.normal );\r\n\r\n                        if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n                            _face.normalModel.negate();\r\n\r\n                        }\r\n\r\n                        _face.normalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n                        var faceVertexNormals = face.vertexNormals;\r\n\r\n                        for ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\r\n\r\n                            var normalModel = _face.vertexNormalsModel[ n ];\r\n                            normalModel.copy( faceVertexNormals[ n ] );\r\n\r\n                            if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n                                normalModel.negate();\r\n\r\n                            }\r\n\r\n                            normalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n                        }\r\n\r\n                        _face.vertexNormalsLength = faceVertexNormals.length;\r\n\r\n                        var vertexUvs = faceVertexUvs[ f ];\r\n\r\n                        if ( vertexUvs !== undefined ) {\r\n\r\n                            for ( var u = 0; u < 3; u ++ ) {\r\n\r\n                                _face.uvs[ u ].copy( vertexUvs[ u ] );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        _face.color = face.color;\r\n                        _face.material = material;\r\n\r\n                        _face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\r\n                        _face.renderOrder = object.renderOrder;\r\n\r\n                        _renderData.elements.push( _face );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } else if ( object instanceof THREE.Line ) {\r\n\r\n                if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n                    var attributes = geometry.attributes;\r\n\r\n                    if ( attributes.position !== undefined ) {\r\n\r\n                        var positions = attributes.position.array;\r\n\r\n                        for ( var i = 0, l = positions.length; i < l; i += 3 ) {\r\n\r\n                            renderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\r\n\r\n                        }\r\n\r\n                        if ( geometry.index !== null ) {\r\n\r\n                            var indices = geometry.index.array;\r\n\r\n                            for ( var i = 0, l = indices.length; i < l; i += 2 ) {\r\n\r\n                                renderList.pushLine( indices[ i ], indices[ i + 1 ] );\r\n\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            var step = object instanceof THREE.LineSegments ? 2 : 1;\r\n\r\n                            for ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\r\n\r\n                                renderList.pushLine( i, i + 1 );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n                    _modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\r\n\r\n                    var vertices = object.geometry.vertices;\r\n\r\n                    if ( vertices.length === 0 ) continue;\r\n\r\n                    v1 = getNextVertexInPool();\r\n                    v1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n                    var step = object instanceof THREE.LineSegments ? 2 : 1;\r\n\r\n                    for ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n                        v1 = getNextVertexInPool();\r\n                        v1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n                        if ( ( v + 1 ) % step > 0 ) continue;\r\n\r\n                        v2 = _vertexPool[ _vertexCount - 2 ];\r\n\r\n                        _clippedVertex1PositionScreen.copy( v1.positionScreen );\r\n                        _clippedVertex2PositionScreen.copy( v2.positionScreen );\r\n\r\n                        if ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\r\n\r\n                            // Perform the perspective divide\r\n                            _clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\r\n                            _clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\r\n\r\n                            _line = getNextLineInPool();\r\n\r\n                            _line.id = object.id;\r\n                            _line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\r\n                            _line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\r\n\r\n                            _line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\r\n                            _line.renderOrder = object.renderOrder;\r\n\r\n                            _line.material = object.material;\r\n\r\n                            if ( object.material.vertexColors === THREE.VertexColors ) {\r\n\r\n                                _line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\r\n                                _line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\r\n\r\n                            }\r\n\r\n                            _renderData.elements.push( _line );\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } else if ( object instanceof THREE.Sprite ) {\r\n\r\n                _vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\r\n                _vector4.applyMatrix4( _viewProjectionMatrix );\r\n\r\n                var invW = 1 / _vector4.w;\r\n\r\n                _vector4.z *= invW;\r\n\r\n                if ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\r\n\r\n                    _sprite = getNextSpriteInPool();\r\n                    _sprite.id = object.id;\r\n                    _sprite.x = _vector4.x * invW;\r\n                    _sprite.y = _vector4.y * invW;\r\n                    _sprite.z = _vector4.z;\r\n                    _sprite.renderOrder = object.renderOrder;\r\n                    _sprite.object = object;\r\n\r\n                    _sprite.rotation = object.rotation;\r\n\r\n                    _sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\r\n                    _sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\r\n\r\n                    _sprite.material = object.material;\r\n\r\n                    _renderData.elements.push( _sprite );\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if ( sortElements === true ) {\r\n\r\n            _renderData.elements.sort( painterSort );\r\n\r\n        }\r\n\r\n        return _renderData;\r\n\r\n    };\r\n\r\n    // Pools\r\n\r\n    function getNextObjectInPool() {\r\n\r\n        if ( _objectCount === _objectPoolLength ) {\r\n\r\n            var object = new RenderableObject();\r\n            _objectPool.push( object );\r\n            _objectPoolLength ++;\r\n            _objectCount ++;\r\n            return object;\r\n\r\n        }\r\n\r\n        return _objectPool[ _objectCount ++ ];\r\n\r\n    }\r\n\r\n    function getNextVertexInPool() {\r\n\r\n        if ( _vertexCount === _vertexPoolLength ) {\r\n\r\n            var vertex = new RenderableVertex();\r\n            _vertexPool.push( vertex );\r\n            _vertexPoolLength ++;\r\n            _vertexCount ++;\r\n            return vertex;\r\n\r\n        }\r\n\r\n        return _vertexPool[ _vertexCount ++ ];\r\n\r\n    }\r\n\r\n    function getNextFaceInPool() {\r\n\r\n        if ( _faceCount === _facePoolLength ) {\r\n\r\n            var face = new RenderableFace();\r\n            _facePool.push( face );\r\n            _facePoolLength ++;\r\n            _faceCount ++;\r\n            return face;\r\n\r\n        }\r\n\r\n        return _facePool[ _faceCount ++ ];\r\n\r\n\r\n    }\r\n\r\n    function getNextLineInPool() {\r\n\r\n        if ( _lineCount === _linePoolLength ) {\r\n\r\n            var line = new RenderableLine();\r\n            _linePool.push( line );\r\n            _linePoolLength ++;\r\n            _lineCount ++;\r\n            return line;\r\n\r\n        }\r\n\r\n        return _linePool[ _lineCount ++ ];\r\n\r\n    }\r\n\r\n    function getNextSpriteInPool() {\r\n\r\n        if ( _spriteCount === _spritePoolLength ) {\r\n\r\n            var sprite = new RenderableSprite();\r\n            _spritePool.push( sprite );\r\n            _spritePoolLength ++;\r\n            _spriteCount ++;\r\n            return sprite;\r\n\r\n        }\r\n\r\n        return _spritePool[ _spriteCount ++ ];\r\n\r\n    }\r\n\r\n    //\r\n\r\n    function painterSort( a, b ) {\r\n\r\n        if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n            return a.renderOrder - b.renderOrder;\r\n\r\n        } else if ( a.z !== b.z ) {\r\n\r\n            return b.z - a.z;\r\n\r\n        } else if ( a.id !== b.id ) {\r\n\r\n            return a.id - b.id;\r\n\r\n        } else {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function clipLine( s1, s2 ) {\r\n\r\n        var alpha1 = 0, alpha2 = 1,\r\n\r\n            // Calculate the boundary coordinate of each vertex for the near and far clip planes,\r\n            // Z = -1 and Z = +1, respectively.\r\n            bc1near =  s1.z + s1.w,\r\n            bc2near =  s2.z + s2.w,\r\n            bc1far =  - s1.z + s1.w,\r\n            bc2far =  - s2.z + s2.w;\r\n\r\n        if ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\r\n\r\n            // Both vertices lie entirely within all clip planes.\r\n            return true;\r\n\r\n        } else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\r\n\r\n            // Both vertices lie entirely outside one of the clip planes.\r\n            return false;\r\n\r\n        } else {\r\n\r\n            // The line segment spans at least one clip plane.\r\n\r\n            if ( bc1near < 0 ) {\r\n\r\n                // v1 lies outside the near plane, v2 inside\r\n                alpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\r\n\r\n            } else if ( bc2near < 0 ) {\r\n\r\n                // v2 lies outside the near plane, v1 inside\r\n                alpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\r\n\r\n            }\r\n\r\n            if ( bc1far < 0 ) {\r\n\r\n                // v1 lies outside the far plane, v2 inside\r\n                alpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\r\n\r\n            } else if ( bc2far < 0 ) {\r\n\r\n                // v2 lies outside the far plane, v2 inside\r\n                alpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\r\n\r\n            }\r\n\r\n            if ( alpha2 < alpha1 ) {\r\n\r\n                // The line segment spans two boundaries, but is outside both of them.\r\n                // (This can't happen when we're only clipping against just near/far but good\r\n                //  to leave the check here for future usage if other clip planes are added.)\r\n                return false;\r\n\r\n            } else {\r\n\r\n                // Update the s1 and s2 vertices to match the clipped line segment.\r\n                s1.lerp( s2, alpha1 );\r\n                s2.lerp( s1, 1 - alpha2 );\r\n\r\n                return true;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = {\r\n    Projector: Projector,\r\n    RenderableFace: RenderableFace,\r\n    RenderableSprite: RenderableSprite,\r\n    RenderableLine: RenderableLine\r\n};"]}