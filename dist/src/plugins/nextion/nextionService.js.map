{"version":3,"sources":["../../../../src/plugins/nextion/nextionService.js"],"names":["require","iconv","NextionEvent","debug","_","NextionService","config","_buffer","Buffer","open","Promise","resolve","reject","SerialPort","list","err","ports","console","log","Date","toGMTString","port","autoOpen","baudRate","r","setTimeout","_initScreen","process","on","setPage","exit","num","_writeUart","cmp","txt","text","toString","split","join","channel","value","val","x","y","x2","y2","color","width","height","buffer","_writeBuffer","write","bco","page","result","positionX","positionY","image","metadata","then","rotate","resize","extractChannel","raw","toBuffer","data","info","setFill","index","numLine","i","currentXColor","j","currentColor","setLine","getTime","date","fit","resolveWithObject","rest","all","from","arr","push","end","concat","setColorB","body","offset","channels","red","green","blue","a","b","c","d","need","ab","cd","buff","fill","shift","fillL","fillR","e","emit","byte","_readBuffer","indexOf","delimiterBuffer","_parseData","slice","event","cmd","wait","hex","_waitForResult","once","str","encode","tail","EventEmitter","delimiter"],"mappings":"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","file":"nextionService.js","sourcesContent":["'use strict';\r\n\r\nimport debug_ from 'debug';\r\n\r\nrequire(\"babel-polyfill\");\r\n\r\nconst iconv = require('iconv-lite');\r\n\r\nimport SerialPort from 'serialport';\r\nimport {EventEmitter} from 'events';\r\nimport sharp from 'sharp';\r\n\r\nconst NextionEvent = {\r\n    0x00: 'invalidInstruction',\r\n    0x01: 'success',\r\n    0x02: 'invalidComponentID',\r\n    0x03: 'invalidPageID',\r\n    0x04: 'invalidPictureID',\r\n    0x05: 'invalidFontID',\r\n    0x11: 'invalidBaudRate',\r\n    0x12: 'invalidCurveControl',\r\n    0x1a: 'invalidVariableName',\r\n    0x1b: 'invalidVariableOperation',\r\n    0x1c: 'assignmentFailure',\r\n    0x1d: 'eepromFailure',\r\n    0x1e: 'invalidParameterQuantity',\r\n    0x1f: 'ioOperationFailure',\r\n    0x20: 'undefinedEscapeCharacter',\r\n    0x23: 'variableNameTooLong',\r\n    0x70: 'stringData',\r\n    0x71: 'numericData',\r\n    0x65: 'touchEvent',\r\n    0x66: 'pageId',\r\n    0x67: 'touchCoordinate',\r\n    0x68: 'touchCoordinateOnWake',\r\n    0x86: 'autoSleep',\r\n    0x87: 'autoWake',\r\n    0x88: 'startup',\r\n    0x89: 'cardUpgrade',\r\n    0xfd: 'transmitFinished',\r\n    0xfe: 'transmitReady'\r\n};\r\n\r\nconst debug = debug_('nextion');\r\n\r\nlet _ = null;\r\n\r\nexport default class NextionService extends EventEmitter {\r\n\r\n    _buffer;\r\n\r\n    constructor(config) {\r\n        super();\r\n\r\n        this._buffer = new Buffer([]);\r\n        this.config = config;\r\n    }\r\n\r\n    async connect() {\r\n        debug(\"serialport open\");\r\n\r\n        let open = false;\r\n        while (open === false) {\r\n            try {\r\n                await new Promise(function (resolve, reject) {\r\n                    SerialPort.list((err, ports) => {\r\n                        resolve();\r\n                    });\r\n                });\r\n\r\n                console.log((new Date()).toGMTString() + \" Ready to open serial port\");\r\n\r\n                this.port = new SerialPort(this.config.port, {\r\n                    autoOpen: false, baudRate: 115200\r\n                });\r\n\r\n                await new Promise((resolve, reject) => this.port.open(resolve));\r\n                await new Promise((r) => setTimeout(r, 1000));\r\n\r\n                console.log((new Date()).toGMTString() + \" Open serial port successfully\");\r\n\r\n                await this._initScreen();\r\n                open = true;\r\n            } catch (e) {\r\n                await new Promise((r) => setTimeout(r, 1000));\r\n            }\r\n        }\r\n\r\n        process.on('SIGINT', () => {\r\n            _ = this.setPage(\"connection\");\r\n            process.exit();\r\n        });\r\n    }\r\n\r\n    async setPage(num) {\r\n        _ = await this._writeUart('page ' + num);\r\n    }\r\n\r\n    async setText(cmp, txt) {\r\n        let text = txt.toString().split(\"\\r\").join('\"+\"\\\\r\"+\"');\r\n        _ = await this._writeUart(cmp + '.txt=\"' + text + '\"');\r\n    }\r\n\r\n    async setValue(cmp, txt) {\r\n        _ = await this._writeUart(cmp + '.val=' + txt + '');\r\n    }\r\n\r\n    async addToWaveForm(cmp, channel, value) {\r\n        await this._writeUart(`add ${cmp},${channel},${value}`);\r\n    }\r\n\r\n    async setVis(cmp, value) {\r\n        let val = value ? \"1\" : \"0\";\r\n        await this._writeUart('vis ' + cmp + ',' + val);\r\n    }\r\n\r\n    async setLine(x, y, x2, y2, color) {\r\n        await this._writeUart(`line ${x},${y},${x2},${y2}`, false);\r\n    }\r\n\r\n    async setFill(x, y, width, height, color) {\r\n        await this._writeUart(`fill ${x},${y},${width},${height},${color}`, false);\r\n    }\r\n\r\n    async setColorP(x,y,color){\r\n        await this._writeUart(`color ${x},${y},${color};`,false);\r\n    }\r\n\r\n    async setColorS(color){\r\n        await this._writeUart(`col ${color};`,false);\r\n    }\r\n\r\n    async setColorB(buffer){\r\n        await this._writeBuffer(buffer,false);\r\n    }\r\n    async _writeBuffer(buffer){\r\n        debug(\"send command : \" + buffer.toString());\r\n        this.port.write(buffer);\r\n    }\r\n\r\n\r\n    async stopRefresh(cmp, bco) {\r\n        await this._writeUart(\"ref_stop\");\r\n    }\r\n\r\n    async startRefresh(cmp, bco) {\r\n        await this._writeUart(\"ref_star\");\r\n    }\r\n\r\n    async setColor(cmp, bco) {\r\n        await this._writeUart(cmp + \".bco=\" + bco);\r\n        await this._writeUart(\"ref \" + cmp);\r\n    }\r\n\r\n    async getPage() {\r\n        let page = await this._writeUart('sendme');\r\n        return page[0];\r\n    }\r\n\r\n    async getValue(cmp) {\r\n        let result = await this._writeUart('get ' + cmp);\r\n        return (result[1] * 256 + result[0]);\r\n    }\r\n\r\n    async displayBlackWhiteImage(buffer, positionX, positionY, width) {\r\n        const image = sharp(buffer);\r\n\r\n        image.metadata()\r\n            .then((metadata) => {\r\n                image\r\n                    .rotate((metadata.width >= metadata.height) ? 0 : -90)\r\n                    .resize(width)\r\n                    .extractChannel(1)\r\n                    .raw()\r\n                    .toBuffer(async (err, data, info) => {\r\n                        _ = this.setFill(positionX, positionY, info.width, info.height, 0);\r\n\r\n                        let index = 0;\r\n                        let numLine = 0;\r\n                        for (let i = 0; i < info.height; i++) {\r\n                            let currentXColor = -1;\r\n                            let x = -1, j = 0;\r\n                            for (j = 0; j < info.width; j++) {\r\n\r\n                                let currentColor = data[index] <= 50 ? 0 : 1;\r\n\r\n                                if (j === 0) {\r\n                                    currentXColor = currentColor;\r\n                                }\r\n                                if (currentColor !== currentXColor) {\r\n                                    if (currentXColor === 1) {\r\n                                        _ = this.setLine(x + positionX, i + positionY, j - 1 + positionX, i + positionY);\r\n                                        debug(\"setLine\", ++numLine, \"y\", i, \"from\", x, \"to\", j - 1, \"color\", currentXColor);\r\n                                    }\r\n                                    x = j - 1;\r\n                                    currentXColor = currentColor;\r\n                                }\r\n                                index++;\r\n                            }\r\n                            if (x === 0 && currentXColor !== 0) {\r\n                                _ = this.setLine(x + positionX, i + positionY, j - 1 + positionX, i + positionY);\r\n                                debug(\"setLine\", ++numLine, \"y\", i, \"from\", x, \"to\", j - 1, \"color\", currentXColor);\r\n                            }\r\n                        }\r\n                        debug(\"time = \", new Date().getTime() - date);\r\n                    });\r\n            });\r\n    }\r\n\r\n    async displayImage(buffer) {\r\n        const image = sharp(buffer);\r\n        image.metadata()\r\n            .then((metadata) => {\r\n                console.log(metadata);\r\n                //.rotate((metadata.width >= metadata.height) ? 0 : 90)\r\n                image\r\n                    .resize((metadata.width >= 150) ? 150 : metadata.width,(metadata.width >= 150) ? metadata.height : 70,{\r\n                        fit: \"inside\"\r\n                    })\r\n                    .raw()\r\n                    .toBuffer({ resolveWithObject: true },async (err, data, info) => {\r\n\r\n                        if (info.width === 150){\r\n                            let rest = (70-info.height)/2;\r\n                            for(let y=0;y<rest;y++){\r\n                                let all = Buffer.from([0xFE,0xFE,0xFE]);\r\n                                let arr = [];\r\n                                for(let i=0;i<150;i++){\r\n                                    arr.push(0x00,0x00);\r\n                                }\r\n                                arr = Buffer.from(arr);\r\n                                let end = Buffer.from([0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]);\r\n                                all = Buffer.concat([all,arr,end]);\r\n                                setTimeout( async () => {\r\n                                    _ = this.setColorB(all);\r\n                                },100);\r\n                            }\r\n                        }\r\n\r\n                        for(let y=0;y<info.height;y++){\r\n                            let all = Buffer.from([0xFE,0xFE,0xFE]);\r\n                            let body = Buffer.from([]);\r\n                            for(let x=0;x<info.width;x++){\r\n                                let offset = info.channels * (info.width * y + x);\r\n                                let red = data[offset];\r\n                                let green = data[offset + 1];\r\n                                let blue = data[offset + 2];\r\n                                let a = (red&0xF0)>>4;\r\n                                let b = (red&0x08)+((green&0xE0)>>5);\r\n                                let c = ((green&0x1C)>>1)+((blue&0x80)>>7);\r\n                                let d = (blue&0x78)>>3;\r\n                                let need = (a<<12) + (b<<8) + (c<<4) + d;\r\n\r\n                                let ab = (a<<4) + b;\r\n                                let cd = (c<<4) + d;\r\n                                let buff = Buffer.from([ab,cd]);\r\n                                body = Buffer.concat([body,buff]);\r\n                            }\r\n                            let rest = (150 - info.width);\r\n                            let arr = [];\r\n                            for(let i=0;i<rest;i++){\r\n                                arr.push(0x00);\r\n                            }\r\n                            if (rest%2 === 0){\r\n                                if (rest === 0){\r\n                                    let end = Buffer.from([0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]);\r\n                                    all = Buffer.concat([all,body,end]);\r\n                                }else{\r\n                                    let fill = Buffer.from(arr);\r\n                                    let end = Buffer.from([0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]);\r\n                                    all = Buffer.concat([all,fill,body,fill,end]);\r\n                                }\r\n                            }else{\r\n                                arr.shift(1);\r\n                                let fillL = Buffer.from(arr);\r\n                                arr.push(0x00,0x00);\r\n                                let fillR = Buffer.from(arr);\r\n                                let end = Buffer.from([0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]);\r\n                                all = Buffer.concat([all,fillL,body,fillR,end]);\r\n                            }\r\n                            //let end = Buffer.from([0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]);[0xFD,0xFD,0xFD,0xFD,0xFD]\r\n                            //all = Buffer.concat([all,end]);\r\n                            try{\r\n                                setTimeout( async () => {\r\n                                    _ = this.setColorB(all);\r\n                                },100);\r\n                            }catch(e){\r\n                                console.log(e);\r\n                            }\r\n                        }\r\n\r\n                        if (info.width === 150){\r\n                            let rest = (70-info.height)/2;\r\n                            if (rest%2 === 0){\r\n                                rest = (70-info.height)/2;\r\n                            }else{\r\n                                rest = rest - 1;\r\n                            }\r\n                            for(let y=0;y<rest;y++){\r\n                                let all = Buffer.from([0xFE,0xFE,0xFE]);\r\n                                let arr = [];\r\n                                for(let i=0;i<150;i++){\r\n                                    arr.push(0x00,0x00);\r\n                                }\r\n                                arr = Buffer.from(arr);\r\n                                let end = Buffer.from([0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]);\r\n                                all = Buffer.concat([all,arr,end]);\r\n                                setTimeout( async () => {\r\n                                    _ = this.setColorB(all);\r\n                                },100);\r\n                            }\r\n                        }\r\n                    });\r\n            });\r\n    }\r\n\r\n    async _initScreen() {\r\n        this.port.on(\"close\", () => {\r\n            this.emit(\"disconnect\");\r\n        });\r\n\r\n        this.port.on('data', (byte) => {\r\n            this._buffer = Buffer.concat([this._buffer, byte]);\r\n            this._readBuffer();\r\n        });\r\n\r\n        console.log((new Date()).toGMTString() + \" Initialize screen\");\r\n        await this._writeUart('bkcmd=3');\r\n        console.log((new Date()).toGMTString() + \" First package sent\");\r\n\r\n        debug(\"screenInitialized\");\r\n    }\r\n\r\n    _readBuffer() {\r\n        let index = this._buffer.indexOf(delimiterBuffer);\r\n        if (index >= 0) {\r\n            let result = NextionService._parseData(this._buffer.slice(0, index));\r\n            this.emit(\"data\", result);\r\n            debug(\"event\", NextionEvent[result.event], \":\", result.event.toString(16), result.data);\r\n            switch (NextionEvent[result.event]) {\r\n                case \"touchEvent\":\r\n                    debug(\"emit : \", \"click_b\" + result.data[1].toString());\r\n                    this.emit(\"click_b\" + result.data[1].toString());\r\n                    break;\r\n\r\n                case \"numericData\":\r\n                    debug(\"emit : \", \"number\");\r\n                    this.emit(\"number\", result.data[0]);\r\n                    break;\r\n\r\n                case \"stringData\":\r\n                    debug(\"emit : \", \"string\", result.data.toString());\r\n                    this.emit(\"string\", result.data.toString());\r\n                    break;\r\n\r\n                default:\r\n                    this.emit(NextionEvent[result.event], result.data);\r\n            }\r\n\r\n            this._buffer = this._buffer.slice(index + 3);\r\n            this._readBuffer();\r\n        }\r\n    }\r\n\r\n    static _parseData(buffer) {\r\n        let result = {};\r\n        result.event = buffer[0];\r\n        result.data = buffer.slice(1);\r\n        return result;\r\n    }\r\n\r\n\r\n    async _writeUart(cmd, wait = true) {\r\n        debug(\"send command : \" + cmd);\r\n        this.port.write(this.hex(cmd));\r\n        if (wait) {\r\n            return await this._waitForResult();\r\n        }\r\n    }\r\n\r\n    async _waitForResult() {\r\n        return await new Promise((resolve, reject) => {\r\n            this.once(\"data\", (data) => {\r\n                debug(\"receiveResult\", data);\r\n                if (NextionEvent[data.event] !== null) {\r\n                    return resolve(data.data);\r\n                }\r\n                return reject(data.data);\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    hex(str) {\r\n        let arr = iconv.encode(str, \"gb2312\");\r\n        let tail = Buffer.from([255, 255, 255]);\r\n        return Buffer.concat([arr, tail]);\r\n    }\r\n\r\n}\r\n\r\nexport const delimiter = [\r\n    0xff,\r\n    0xff,\r\n    0xff\r\n];\r\n\r\nexport const delimiterBuffer = Buffer.from(delimiter);"]}