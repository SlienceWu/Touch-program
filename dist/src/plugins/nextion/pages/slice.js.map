{"version":3,"sources":["../../../../../src/plugins/nextion/pages/slice.js"],"names":["require","_","Slice","screenManager","options","setScreen","_this","sliceCheck","setInterval","reqSlice","addListener","clearInterval","changePage","text","confirmType","data0","PlateID","data1","data2","returnPage","nanoDLP","getSlice","data","running","LayersCount","layerCount","percentage","setText","layerID","status","proc","mem","Math","ceil","parseInt","temp","abstract"],"mappings":";;;;;;;;AAAA;;;;AAGA;;;;;;;;;;;;;;AADAA,QAAQ,gBAAR;;;AAGA,IAAIC,IAAI,IAAR;;IAEqBC,K;;;AAEjB,mBAAYC,aAAZ,EAA2B;AAAA;;AAAA,6GACjBA,aADiB;AAE1B;;;;;gGAEUC,O;;;;;;;;;;uCACD,KAAKC,SAAL,CAAe,OAAf,C;;;AACFC,qC,GAAQ,I;;AACZ,qCAAKC,UAAL,GAAkBC,YAAa,YAAK;AAChCF,0CAAMG,QAAN,CAAeL,OAAf;AACH,iCAFiB,EAEhB,IAFgB,CAAlB;;AAIA,qCAAKM,WAAL,CAAiB,UAAjB,EAA6B,YAAM;AAC/BC,kDAAc,OAAKJ,UAAnB;AACAN,wCAAI,OAAKW,UAAL,CAAgB,SAAhB,EAA2B;AAC3BC,8CAAM,OADqB;AAE3BC,qDAAa,aAFc;AAG3BC,+CAAOX,QAAQY,OAHY;AAI3BC,+CAAO,WAJoB;AAK3BC,+CAAOd,OALoB;AAM3Be,oDAAY;AANe,qCAA3B,CAAJ;AAQH,iCAVD;;;;;;;;;;;;;;;;;;;kGAaWf,O;;;;;;;uCACM,KAAKgB,OAAL,CAAaC,QAAb,E;;;AAAbC,oC;;AACJ;AACA,oCAAIA,KAAKC,OAAL,KAAiB,GAArB,EAAyB;AACrBZ,kDAAc,KAAKJ,UAAnB;AACAH,4CAAQoB,WAAR,GAAsBF,KAAKG,UAA3B;AACA,yCAAKb,UAAL,CAAgB,OAAhB,EAAwBR,OAAxB;AACH,iCAJD,MAIM,IAAIkB,KAAKI,UAAL,KAAoB,KAApB,IAA6BJ,KAAKC,OAAL,KAAiB,GAAlD,EAAsD;AACxD,yCAAKI,OAAL,CAAa,IAAb,EAAmB,IAAI,GAAvB;AACA,yCAAKA,OAAL,CAAa,IAAb,EAAmB,IAAI,GAAJ,GAAUvB,QAAQoB,WAArC;AACH,iCAHK,MAGD;AACD,yCAAKG,OAAL,CAAa,IAAb,EAAmBL,KAAKI,UAAL,GAAkB,GAArC;AACA,yCAAKC,OAAL,CAAa,IAAb,EAAmBL,KAAKM,OAAL,GAAe,GAAf,GAAqBN,KAAKG,UAA7C;AACH;;;;;;;;;;;;;;;;;;;kGAGQI,M;;;;;AACT5B,oCAAI,KAAK0B,OAAL,CAAa,IAAb,EAAmB,SAASE,OAAOC,IAAhB,GAAuB,OAAvB,GAAiCD,OAAOE,GAAxC,GAA8C,QAA9C,GAAyDC,KAAKC,IAAL,CAAUC,SAASL,OAAOM,IAAhB,CAAV,CAAzD,GAA4F,GAA/G,CAAJ,C,CAAyH;;;;;;;;;;;;;;;;;;;EA3C9FC,kB;;kBAAdlC,K","file":"slice.js","sourcesContent":["import request from \"request-promise-native\";\r\n\r\nrequire(\"babel-polyfill\");\r\nimport abstract from \"./abstract.js\";\r\n\r\nlet _ = null;\r\n\r\nexport default class Slice extends abstract{\r\n\r\n    constructor(screenManager) {\r\n        super(screenManager);\r\n    }\r\n\r\n    async init(options) {\r\n        await this.setScreen(\"slice\");\r\n        let _this = this;\r\n        this.sliceCheck = setInterval( ()=> {\r\n            _this.reqSlice(options);\r\n        },1000);\r\n\r\n        this.addListener(\"click_b1\", () => {\r\n            clearInterval(this.sliceCheck);\r\n            _ = this.changePage(\"confirm\", {\r\n                text: \"slice\",\r\n                confirmType: \"deleteplate\",\r\n                data0: options.PlateID,\r\n                data1: \"stopSlice\",\r\n                data2: options,\r\n                returnPage: \"plates\"\r\n            });\r\n        });\r\n    }\r\n\r\n    async reqSlice(options){\r\n        let data = await this.nanoDLP.getSlice();\r\n        //data.percentage === \"100\" &&\r\n        if (data.running === \"0\"){\r\n            clearInterval(this.sliceCheck);\r\n            options.LayersCount = data.layerCount;\r\n            this.changePage(\"plate\",options);\r\n        }else if (data.percentage === \"100\" && data.running === \"1\"){\r\n            this.setText(\"t1\", 0 + \"%\");\r\n            this.setText(\"t2\", 0 + \"/\" + options.LayersCount);\r\n        }else{\r\n            this.setText(\"t1\", data.percentage + \"%\");\r\n            this.setText(\"t2\", data.layerID + \"/\" + data.layerCount);\r\n        }\r\n    }\r\n\r\n    async update(status){\r\n        _ = this.setText(\"t3\", \"cpu:\" + status.proc + \" mem:\" + status.mem + \" temp:\" + Math.ceil(parseInt(status.temp)) + \"C\"); //\r\n    }\r\n}"]}