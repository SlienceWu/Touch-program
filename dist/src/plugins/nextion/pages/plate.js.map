{"version":3,"sources":["../../../../../src/plugins/nextion/pages/plate.js"],"names":["require","fs","_","Plate","screenManager","plate","setScreen","nanoDLP","getProfiles","profiles","imageX","imageY","imageWidth","setText","Path","lodash","findIndex","ProfileID","Title","LayersCount","console","log","PlateID","addListener","changePage","Type","type","command","text","confirmType","data0","returnPage","gap","index","Math","floor","setLayer","getCurrentPlateLayer","image","enabled","nextion","displayBlackWhiteImage","catch","error","e","abstract"],"mappings":"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","file":"plate.js","sourcesContent":["require(\"babel-polyfill\");\r\n\r\nconst fs = require(\"fs\");\r\n\r\nimport abstract from \"./abstract.js\";\r\nimport lodash from \"lodash\";\r\nimport config from \"../../../../config.json\";\r\n\r\nlet _ = null;\r\n\r\nexport default class Plate extends abstract {\r\n\r\n\r\n    constructor(screenManager) {\r\n        super(screenManager);\r\n    }\r\n\r\n    async init(plate) {\r\n        await this.setScreen(\"plate\");\r\n\r\n        this.plate = plate;\r\n        this.profiles = await this.nanoDLP.getProfiles();\r\n\r\n        this.imageX = 0x48;//0x1E;\r\n        this.imageY = 0x18;//0x3C;\r\n        this.imageWidth = 0xb3;\r\n\r\n        _ = this.setText(\"t0\", this.plate.Path);\r\n        _ = this.setText(\"t1\", this.profiles[lodash.findIndex(this.profiles, {ProfileID:this.plate.ProfileID})].Title);\r\n        _ = this.setText(\"t7\", `${this.plate.LayersCount} layers`);\r\n\r\n        console.log(\"Printing Ready -- Plate ID: \" + this.plate.PlateID + \", Plate Name: \" + this.plate.Path, \", Profile ID: \" + this.plate.ProfileID);\r\n\r\n        this.addListener(\"click_b1\",() => {\r\n            _ = this.changePage(\"home\");\r\n        });\r\n        this.addListener(\"click_b2\", () => {\r\n            if (plate.Type === \"stl\"){\r\n                _ = this.changePage(\"plates\",{\r\n                    type: \"stl\",\r\n                    PlateID: plate.PlateID\r\n                });\r\n            }else{\r\n                _ = this.changePage(\"plates\",{\r\n                    type: \"zip\",\r\n                    PlateID: plate.PlateID\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addListener(\"click_b9\", async () => {\r\n            await this.nanoDLP.command(\"/printer/start/\" + this.plate.PlateID);\r\n        });\r\n\r\n        this.addListener(\"click_b15\", async () => {\r\n            _ = this.changePage(\"confirm\", {\r\n                text: \"delete plate:\" + this.plate.Path,\r\n                confirmType: \"deleteplate\",\r\n                data0: this.plate.PlateID,\r\n                returnPage: \"plates\"\r\n            });\r\n        });\r\n\r\n        this.gap = 100 / (this.plate.LayersCount);\r\n\r\n        this.addListener(\"number\", (index) => {\r\n            index = Math.floor((index) / this.gap);\r\n            _ = this.setLayer(index);\r\n        });\r\n\r\n        await this.setLayer(1);\r\n    }\r\n\r\n    async setLayer(index) {\r\n        this.index = index === 0 ? 1 : index;\r\n        await this.setText(\"t12\", `Loading ${this.index}/${this.plate.LayersCount}`);\r\n        let image = await this.nanoDLP.getCurrentPlateLayer(this.plate.PlateID, this.index);\r\n        if (this.enabled) {\r\n            await this.nextion.displayBlackWhiteImage(image, this.imageX, this.imageY, this.imageWidth).catch(e => console.error(e));\r\n        }\r\n    }\r\n}\r\n"]}